{"mappings":"AAIA,wBAA+B;IAC3B,CAAC,IAAI,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC;CAC7B,CAAA;AAED,0BAAiC;IAC7B,CAAC,IAAI,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC;CAC7B,CAAA;AAED,oBAA2B;IACvB,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;IAC9C,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;CAClD,CAAA;AAED,iBAAwB,CAAC,IAAI;IACzB,QAAO,CAAC,CAAC;IACT,SAAS,EAAE,CAAC,CAAC;CAChB,CAAA;AAED,iCAAiC,CAAC,SAAS,WAAW,IAAI,CAAC,GAAG;IAC1D,IAAI,OAAO,IAAI,MAAM,CAAC;IACtB,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,EAAE,EAAE;IAEtC,IAAI,OAAO,IAAI,MAAM,CAAC;IACtB,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,EAAE,EAAE;IAEtC,IAAI,MAAM,IAAI,MAAM,CAAC;IACrB,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE;IAE1B,QAAQ,EAAE,gBAAgB,CAAC;IAC3B,UAAU,EAAE,kBAAkB,CAAC;IAC/B,IAAI,EAAE,YAAY,CAAC;CACtB,CAAA;AI7BD,6BAA6B;IACzB,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;IAC5B,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;IAC5B,SAAS,CAAC,EAAE,OAAO,CAAC;CACvB,CAAC;AAQF,6BAA6B,CAAC,SAAS,WAAW,GAAG,WAAW;IAQ5D,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;gBAGb,IAAI,EAAE,CAAC,EACP,EACI,OAA0B,EAC1B,OAA0B,EAC1B,SAA8B,GACjC,GAAE,cAAmB;IAQ1B,IAAI,OAAO,IAAI,MAAM,CAEpB;IACD,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,EAAE,EAEnC;IAED,IAAI,OAAO,IAAI,MAAM,CAEpB;IACD,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,EAAE,EAEnC;IAED,IAAI,MAAM,IAGQ,MAAM,CADvB;IACD,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,EAEvB;IAED,OAAO,IAAI,IAAI;IAIf,QAAQ,CAAC,IAAI,GAAE,UAAsB,GAAG,IAAI;IAuB5C,UAAU,CAAC,IAAI,GAAE,UAAsB,GAAG,IAAI;IAuB9C,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,OAAO,GAAG,IAAI,GAAG,IAAI;IACjD,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,OAAO,GAAG,IAAI,GAAG,IAAI;IA2BlD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,WAAW,EAC/B,IAAI,EAAE,YAAY,CAAC,CAAC,EACpB,OAAO,GAAE,cAAmB,GAC7B,YAAY,qBAAqB,CAAC,CAAC,CAAC;CA2B1C","sources":["src/src/types.ts","src/src/errors.ts","src/src/requests.ts","src/src/events.ts","src/src/nitrous.ts","src/nitrous.ts"],"sourcesContent":[null,null,null,null,null,"import type { Constructor, NitrousCustomElement } from './types';\nimport { NitrousClickListener, NitrousSubmitListener } from './events';\nimport { NitrousError } from './errors';\n\nexport type { NitrousCustomElement }\n\nexport type NitrousOptions = {\n    include?: string | string[];\n    exclude?: string | string[];\n    swapTitle?: boolean;\n};\n\nconst defaults = {\n    include: ['a', 'area'],\n    exclude: [] as string[],\n    swapTitle: true,\n};\n\nexport default class Nitrous<T extends HTMLElement = HTMLElement> {\n    private readonly _parser = new DOMParser();\n    private readonly _onClick = new NitrousClickListener(this);\n    private readonly _onSubmit = new NitrousSubmitListener(this);\n    private readonly _swapTitle: boolean;\n    private _include: string;\n    private _exclude: string;\n\n    readonly root: T;\n\n    constructor(\n        root: T,\n        {\n            include = defaults.include,\n            exclude = defaults.exclude,\n            swapTitle = defaults.swapTitle,\n        }: NitrousOptions = {},\n    ) {\n        this.root = root;\n        this._swapTitle = swapTitle;\n        this._include = include instanceof Array ? include.join(', ') : include;\n        this._exclude = exclude instanceof Array ? exclude.join(', ') : exclude;\n    }\n\n    get include(): string {\n        return this._include;\n    }\n    set include(value: string | string[]) {\n        this._include = value instanceof Array ? value.join(',') : value;\n    }\n\n    get exclude(): string {\n        return this._exclude;\n    }\n    set exclude(value: string | string[]) {\n        this._exclude = value instanceof Array ? value.join(',') : value;\n    }\n\n    get target() {\n        return this.root.getAttribute('target') ?? '';\n    }\n    set target(value: string) {\n        this.root.setAttribute('target', value);\n    }\n\n    destroy(): void { \n        this.unregister();\n    }\n\n    register(root: ParentNode = this.root): void {\n        for (const el of root.querySelectorAll(this._include)) {\n            if (el.matches(this._exclude)) {\n                continue;\n            }\n\n            switch (true) {\n                case el instanceof HTMLAnchorElement &&\n                    el.dataset['nitrous'] !== 'false':\n                case el instanceof HTMLAreaElement &&\n                    el.dataset['nitrous'] !== 'false':\n                    el.addEventListener('click', this._onClick);\n                    break;\n                case el instanceof HTMLFormElement &&\n                    el.dataset['nitrous'] !== 'false':\n                    el.addEventListener('submit', this._onSubmit);\n                    break;\n                default:\n                    continue;\n            }\n        }\n    }\n\n    unregister(root: ParentNode = this.root): void {\n        for (const el of root.querySelectorAll(this._include)) {\n            if (el.matches(this._exclude)) {\n                continue;\n            }\n\n            switch (true) {\n                case el instanceof HTMLAnchorElement &&\n                    el.dataset['nitrous'] !== 'false':\n                case el instanceof HTMLAreaElement &&\n                    el.dataset['nitrous'] !== 'false':\n                    el.removeEventListener('click', this._onClick);\n                    break;\n                case el instanceof HTMLFormElement &&\n                    el.dataset['nitrous'] !== 'false':\n                    el.removeEventListener('submit', this._onSubmit);\n                    break;\n                default:\n                    continue;\n            }\n        }\n    }\n\n    swap(html: string, target?: Element | null): void;\n    swap(dom: Document, target?: Element | null): void;\n    swap(input: string | Document, target: Element | null = null): void {\n        const dom =\n            typeof input === 'string' ?\n                this._parser.parseFromString(input, 'text/html')\n                : input;\n\n        target ??= this.root.querySelector(this.target);\n        if (!target) {\n            throw new NitrousError(\n                `Target '${this.target}' does not exist`,\n            );\n        }\n\n        target.replaceChildren(\n            ...Array.from(dom.body.childNodes).map(node =>\n                document.adoptNode(node),\n            ),\n        );\n\n        if (this._swapTitle) {\n            document.title = dom.title;\n        }\n\n        this.register(target);\n    }\n\n    static define<T extends HTMLElement>(\n        base: Constructor<T>,\n        options: NitrousOptions = {}\n    ): Constructor<NitrousCustomElement<T>> {\n        // @ts-expect-error 2322 2415\n        return class extends base {\n            private readonly _nitrous = new Nitrous(this, options);\n\n            get include(): string { return this._nitrous.include; }\n            set include(value: string | string[]) { this._nitrous.include = value; }\n\n            get exclude(): string { return this._nitrous.exclude; }\n            set exclude(value: string | string[]) { this._nitrous.exclude = value; }\n\n            get target(): string { return this._nitrous.target; }\n            set target(value: string) { this._nitrous.target = value; }\n\n            register(root?: ParentNode): void {\n                this._nitrous.register(root);\n            }\n\n            unregister(root?: ParentNode): void {\n                this._nitrous.unregister(root);\n            }\n\n            swap(input: string | Document, target: Element | null = null): void {\n                this._nitrous.swap(input as string, target);\n            }\n        }\n    }\n};\n"],"names":[],"version":3,"file":"nitrous.d.ts.map"}