{"mappings":"AAIA,wBAAyB,SAAQ,WAAW;IACxC,IAAI,OAAO,IAAI,MAAM,CAAC;IACtB,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,EAAE,EAAE;IAEtC,IAAI,OAAO,IAAI,MAAM,CAAC;IACtB,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,EAAE,EAAE;IAEtC,IAAI,MAAM,IAAI,MAAM,CAAC;IACrB,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE;IAE1B,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC;IAClC,UAAU,CAAC,IAAI,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC;IAEpC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;IAClD,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;CACtD;AAED,0BAAiC;IAC7B,QAAO,OAAO,CAAC;IACf,SAAS,EAAE,OAAO,CAAC;IAEnB,SAAS,EAAE,OAAO,CAAC;CACtB,CAAA;AIpBD,6BAA6B;IACzB,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;IAC5B,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;IAC5B,SAAS,CAAC,EAAE,OAAO,CAAC;CACvB,CAAA;AAED,8BAA8B,IAAI,EAAE,GAAG,MAAM,IAAI,MAAM,EAAE,EAAE,EACvD,OAAuB,EACvB,OAAY,EACZ,SAAgB,GACnB,GAAE,cAAmB,GAAG,kBAAkB,CAiG1C","sources":["src/src/types.ts","src/src/errors.ts","src/src/requests.ts","src/src/events.ts","src/src/nitrous.ts","src/nitrous.ts"],"sourcesContent":[null,null,null,null,null,"import type { NitrousConstructor } from './types';\nimport { NitrousClickListener, NitrousSubmitListener } from './events';\nimport { NitrousError } from './errors';\n\nexport type { Nitrous } from './types';\n\nexport type NitrousOptions = {\n    include?: string | string[];\n    exclude?: string | string[];\n    swapTitle?: boolean;\n}\n\nexport function defineNitrous(name: `${string}-${string}`, {\n    include = ['a', 'area'],\n    exclude = [],\n    swapTitle = true,\n}: NitrousOptions = {}): NitrousConstructor {\n    return class Nitrous extends HTMLElement {\n        static { customElements.define(name, this); }\n        static swapTitle = swapTitle;\n\n        private readonly _parser = new DOMParser();\n        private readonly _onClick = new NitrousClickListener(this);\n        private readonly _onSubmit = new NitrousSubmitListener(this);\n        private _include = include instanceof Array ? include.join(', ') : include;\n        private _exclude = exclude instanceof Array ? exclude.join(', ') : exclude;\n\n        get include(): string { return this._include; }\n        set include(value: string | string[]) {\n            this._include = value instanceof Array ? value.join(',') : value;\n        }\n\n        get exclude(): string { return this._exclude; }\n        set exclude(value: string | string[]) {\n            this._exclude = value instanceof Array ? value.join(',') : value;\n        }\n\n        get target() { return this.getAttribute('target') ?? ''; }\n        set target(value: string) {\n            this.setAttribute('target', value);\n        }\n\n        connectedCallback() {\n            this.register();\n        }\n\n        disconnectedCallback() {\n            this.unregister();\n        }\n\n        register(root: ParentNode = this): void {\n            for (const el of root.querySelectorAll(this._include)) {\n                if (el.matches(this._exclude)) {\n                    continue;\n                }\n\n                switch (true) {\n                    case el instanceof HTMLAnchorElement && el.dataset['nitrous'] !== 'false':\n                    case el instanceof HTMLAreaElement && el.dataset['nitrous'] !== 'false':\n                        el.addEventListener('click', this._onClick);\n                        break;\n                    case el instanceof HTMLFormElement && el.dataset['nitrous'] !== 'false':\n                        el.addEventListener('submit', this._onSubmit);\n                        break;\n                    default:\n                        continue;\n                }\n            }\n        }\n\n        unregister(root: ParentNode = this): void {\n            for (const el of root.querySelectorAll(this._include)) {\n                if (el.matches(this._exclude)) {\n                    continue;\n                }\n\n                switch (true) {\n                    case el instanceof HTMLAnchorElement && el.dataset['nitrous'] !== 'false':\n                    case el instanceof HTMLAreaElement && el.dataset['nitrous'] !== 'false':\n                        el.removeEventListener('click', this._onClick);\n                        break;\n                    case el instanceof HTMLFormElement && el.dataset['nitrous'] !== 'false':\n                        el.removeEventListener('submit', this._onSubmit);\n                        break;\n                    default:\n                        continue;\n                }\n            }\n        }\n\n        swap(html: string, target?: Element | null): void;\n        swap(dom: Document, target?: Element | null): void;\n        swap(input: string | Document, target: Element | null = null): void {\n            const dom = typeof input === 'string'\n                ? this._parser.parseFromString(input, 'text/html')\n                : input;\n\n            target ??= this.querySelector(this.target);\n            if (!target) {\n                throw new NitrousError(`Target '${this.target}' does not exist`);\n            }\n\n            target.replaceChildren(\n                ...Array\n                    .from(dom.body.childNodes)\n                    .map(node => document.adoptNode(node))\n            );\n\n            if (Nitrous.swapTitle) {\n                document.title = dom.title;\n            }\n        }\n    }\n}\n"],"names":[],"version":3,"file":"nitrous.d.ts.map"}